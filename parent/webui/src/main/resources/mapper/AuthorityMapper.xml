<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jinuxes.cloud.mapper.AuthorityMapper" >
  <resultMap id="BaseResultMap" type="com.jinuxes.cloud.entity.Authority" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, title, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jinuxes.cloud.entity.AuthorityExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_authority
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_authority
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_authority
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jinuxes.cloud.entity.AuthorityExample" >
    delete from t_authority
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jinuxes.cloud.entity.Authority" >
    insert into t_authority (id, name, title, 
      create_time)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jinuxes.cloud.entity.Authority" >
    insert into t_authority
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jinuxes.cloud.entity.AuthorityExample" resultType="java.lang.Integer" >
    select count(*) from t_authority
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_authority
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_authority
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jinuxes.cloud.entity.Authority" >
    update t_authority
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jinuxes.cloud.entity.Authority" >
    update t_authority
    set name = #{name,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 自定义sql -->
  <select id="selectAuthorityByKeyword" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from t_authority
    where name like concat("%",#{keyword},"%") or title like concat("%",#{keyword},"%")
  </select>

  <select id="selectAuthorityByName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from t_authority
    where name = #{name}
  </select>

  <delete id="deleteAuthoritysById">
    delete from t_authority
    where id in
    <foreach collection="authorityIdList" item="id" separator="," open="(" close=")">
      #{id}
    </foreach>
  </delete>

  <update id="updateAuthorityById">
    update t_authority
    set
        name=#{name},
        title=#{title}
    where id=#{id}
  </update>

  <select id="selectAssignedAuthority" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/> from t_authority
    where id in (select authority_id from inner_role_authority where role_id = #{roleId})
  </select>

  <select id="selectUnAssignAuthority" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/> from t_authority
    where id not in (select authority_id from inner_role_authority where role_id = #{roleId})
  </select>

  <delete id="deleteRoleAuthorityRelationship">
    delete from inner_role_authority where role_id = #{roleId}
  </delete>
  
  <insert id="insertRoleAuthorityRelationship">
    insert into inner_role_authority(role_id, authority_id) values
    <foreach collection="authorityIds" item="authorityId" separator=",">
      (#{roleId},#{authorityId})
    </foreach>
  </insert>

  <select id="selectAssignedAuthorityNameByUserId" resultType="string">
    select name from t_authority
    left join inner_role_authority on t_authority.id = inner_role_authority.authority_id
    left join inner_user_role on inner_role_authority.role_id = inner_user_role.role_id
    where inner_user_role.user_id = #{userId}
  </select>
</mapper>